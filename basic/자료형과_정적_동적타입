# 자료형과 정적, 동적 타입

- 자료형은 변수에 값으로 들어가는 데이터들의 숫자나, 문자열, 참/거짓

## 우리는 왜 변수를 만들때마다 타입을 지정해줘야 할까? (저장)

- 컴퓨터는 0과1 즉, 전기 신호가 off면 0, on이면 1 모든걸 이진법을 기반으로 표현하고 인식한다.
  이때 한정된 메모리, 즉 RAM의 공간 안에서 용량을 초과하지 않고 많은 작업들을 수행하기 위해서는 적절하게 메모리를 할당할 필요가 있다.
- Boolean Type을 예로들자면 한칸의 비트로 모두 표현이 가능하다. 0과 1로 true, false가 표현이 가능하기 때문이다.
- 언어마다의 각 자료형은 각각의 범주에 포함되는 모든 데이터들을 가장 효율적으로 저장해서 메모리를 절약할 수 있도록 되어있다.

## 우리는 왜 변수를 만들때마다 타입을 지정해줘야 할까? (데이터 READ)

- 어떠한 변수가 주어졌을떄 그로부터 몇칸을 읽어들일지를 자료형으로 판단한다.
- Boolean이라면 한칸

# 컴파일/인터프리터 언어와의 관계

- 자바는 컴파일 언어이다.
- 자바스크립트, 파이썬은 인터프리터 언어이다.

- 컴파일 언어는 프로그래밍 언어로 짠 코드를 컴파일이라는 과정을 통해서 다른 형태로 바꿔준다.
  그 결과물은 기계어일수도 있고, 자바의 .class 파일처럼 가상머신용 바이트코드일 수도 있다.
  자바스크립트로 컴파일되는 타입스크립트같은 독특한 케이스도 있다.
  이러한 컴파일 과정을 거친 후 프로그램이 실행되는 것이 컴파일 언어의 특징이다.

- 반면 인터프리터 언어는 코딩 후 다른 과정을 거치지 않고 개발자가 작성한 코드가 그대로 실행할 곳으로
  보내져서 인터프리터라는 것을 통해 바로바로 기계어로 통역되어 실행된다. 사실상 자바스크립트 언어는
  인터프리터 과정중 컴파일이라는 과정을 거치기는 하지만 개발과정에서 컴파일이 포함되지 않기에 인터프리터 언어라고 불린다.

- 예외들이 있지만 보통적으로 컴파일 언어들은 정적 타입, 인터프리터 언어들은 동적타입에 자료형을 갖고 있다.
- 정적 타입이란 변수 등에 지정된 자료형을 바꿀 수 없는 것을 말한다.(자바)
- 동적 타입이란 변수 등에 지정된 자료형에 다른 자료형의 값을 넣을 수 있다.(자바스크립트, 파이썬)

## 컴파일 언어와 인터프리터 언어는 왜 이런 차이를 가지는가?

- 여러 이유들이 있지만 다음과 같은 이유들을 생각해볼 수 있다.
- 컴파일 언어는 코드를 실행하거나 배포하기 전 즉, 개발과정에서 컴파일이란 과정을 거치기 때문에
  코드 중 철자나 문법 상에 문제가 있을 때 해당 단계(컴파일)에서 오류를 발생시켜서 잡아낼 수 있다.
  그렇기 때문에 컴파일 언어는 개발자의 일관성을 유지하는 정적 타이핑에 보다 유리하다.
- 컴파일과 인터프리터 언어는 주어진 언어를 실행하는 서로 다른 방식일 뿐이다.
- 동적 타입언어는 간단한 프로젝트를 진행할 때는 편리하지만 프로젝트 규모가 커지면 숫자용 함수에 문자열이 들어가버리는 등의
  문제들이 생겨 런타임 오류의 위험성이 커진다. 코딩중에 자료의 일관성을 강제하지 않기에 실행 시점이 되어서야 문제가 터진다.

## 동적 타입의 간단한 문제점 예시

보통은 다음과 같은 결과를 원한다.
ex) 1 + 1 = 2
그러나 둘중 하나의 타입이 문자열일시 다음과 같은 결과를 가져온다
ex) '1' + 1 = '11'
