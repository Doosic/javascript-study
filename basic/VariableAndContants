# 변수와 상수

- 변수와 상수 (데이터를 담는 주머니)

* 값의 의미를 나타낸다.
* 값의 재활용을 가능케 한다.
* 변경되는 상태를 가리키는 식별자.

# 변수 variable

- 담긴 값이 바뀔 수 있는 주머니
- let 사용
- undefined 할당 후 재할당
- 같은 값이 있다면 다른 데이터 영역에 저장되지 않고 같은 값을 가리킨다.(메모리 절약)
- 변수에 새로운 값을 할당 할 때에 C등의 언어와 달리, 메모리상 가리키는 위치가 변경된다.
- 이미 만들어진 주머니를 다시 만들 수 없다.
- 선언 전에는 사용할 수 없다.

메모리안에는 변수 영역과, 데이터 영역이 나뉜다.
변수 영역에 X라는 변수가 담긴다면 해당 X변수는 데이터 영역에 할당된 undefined 데이터를
가리킨다.(참고로 자바스크립트는 undefined도 하나의 값이다.)

undefined 할당 후 재할당 : 처음 변수를 초기화 할때에는 무조건 데이터 영역의 undefined를 가리키고 이후 초기화를 통해
의미있는 값을 가리킨다. 해당 지식은 코딩에는 영향을 미치지 않음으로 이론적으로만 알고있으면 된다.

변수에 새로운 값을 할당 할 때 메모리에서 차지하는 자리의 크기가 다르기 때문에 언어의 특성상 다른 자리의 데이터 영역에
값을 할당한다.

# 상수 constant

- 담긴 값이 바뀔 수 없는 주머니
- const 사용
- 흔히 대문자로 명명 - 여러 곳에서 사용될 공통 값인 경우

상수는 선언과 동시에 초기화 해야한다.
선언하기만 하는 것은 불가능하다.
상수는 값의 변경이 불가능하다. 값이 바뀔일이 없다면 const로 선언하자.
다만 그 값이 객체일때는 안에 속한 값들을 변경할 수 있다.

책을 읽었을때에 나온 내용중 기억해둘것은
const로 모든것을 선언하자는 주장이 있고
전역적으로 사용할 것은 var로 선언하자는 주장이 있다.
그러나 나는 const로 사용하는 방법을 따르기로 했다. 그게 익숙하기도 하고
애초에 var를 썼다가 스코프에 범위를 벗어나 어디선가 값이 오염되는 상황을 방지하는게
좋다고 생각하기 때문이다.

# 식별자 상수와 변수 등의 이름

## 식별자 identifier 명명 규칙

- 영문, 한글 및 유니코드(대부분의 문자 표현)글자, 숫자 사용 가능
- 특수문자 $ 또는 \_
- 숫자로 시작할 수 없음
- 공백(스페이스) 사용 불가

한글, 숫자는 왠만하면 사용하지 말자.

### CPU: 일하는 사람

- 컴퓨터의 뇌 - 작업을 진행하는 주체

### 보조기억장치(SSD,HDD): 서랍

- 상대적으로 저장공간은 넓고 접근속도는 느림
- 소프트웨어(코드)가 저장되는 곳

### 메모리 (RAM): 책상 위 공간

- 상대적으로 저장공간은 좁고 접근 속도는 빠르다
- 사람(CPU)이 서랍(보조기억장치)에 든 데이터를 꺼내 올려두고 작업을 하는 공간
- 변수와 상수를 비롯한 데이터들이 이곳에 만들어지고 사용된다.
- 메모리를 효율적으로 사용하기 위한 지식과 노력이 필요하다!!!
