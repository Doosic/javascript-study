# 문자열에 사용되는 연산자

x == y 값이 같다.
x === y 자료형도 값도 같다. (권장)
x != y 값이 다르다.
x !== y 자료형 또는 값이 다르다. (권장)
x < y 사전순상 x가 먼저온다.
x <= y 사전순상 x가 먼저 오거나 같다.
y < x 사전순상 y가 먼저온다.
y <= x 사전순상 y가 먼저 오거나 같다.

 - 값을 비교할때는 === 이 좋은 이유는 자료형까지 비교해주는 것이 좋기 때문이다.
   '1' + 1 = '11' 과 같은 현상을 방지할 수 있다.
   ex) '1' == 1 은 true를 반환한다.
   ex) '1' === 1 은 false를 반환한다.

 - 연산자 == 이 자료형을 구분하지 않는 이유는 암묵적으로 타입을 변환하여 비교해주기 때문이다.
   (그렇다면 문자열과 숫자중 누구를 변환해서 비교하는거지? 내가 알기로는 문자를 숫자로 케스팅하는걸로 아는데)


 - 숫자 문자열 비교 부등호시 주의할 점
   100 > 12 : true (숫자는 그 자체로 비교한다)
   '100' > '12' : false (문자는 사전순으로 비교한다.)
   '100' > 12 : true (문자와 숫자를 비교하면 문자를 숫자로 변환)


## 연결

x + y (이항연산자): x와 y를 이어붙은 값을 반환 (부수효과를 일으키지 않는다.)
x += y (할당연산자): x에 y를 이어붙이고 그 결과를 반환 (부수효과를 일으킨다. => 어딘가에 들어있는 값을 다른것으로 변화시키는것. 즉, 코드의 상태변화가 일어난다.)

 - 프로그래밍에서는 부수효과를 일으키지 않는 것이 안전하다.

 - 할당 연산자의 부수효과
   ex) let str1 = '헬로'
       let str2 = str1 += ' 월드~~~'

       console.log(str1) 결과값 : '헬로 월드~~~'
       console.log(str2) 결과값 : '헬로 월드~~~'
       즉, str1의 값이 변경되어버리는 부수 효과를 일으켰다. (어딘가에 들어있는 값을 다른것으로 변화시킴)

 - 오류! 왼쪽값은 부수효과의 대상(변수)이어야 한다.
   let str = '헬로' += '월드' 에러발생
   let str = title += '월드' 에러는 발생하지 않으나 title의 값이 변화되는 부수효과 발생

   const는 상수이기에 변화가 되지 않는다.




